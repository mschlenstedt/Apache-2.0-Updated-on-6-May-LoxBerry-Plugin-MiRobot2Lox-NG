#!/bin/bash

state_txt_en=( "Unknown 1" "Charger disconnected" "Idle" "Unknown 4" "Cleaning" "Returning home" "Manual mode" "Charging" "Unknown 9" "Paused" "Spot cleaning" "Error" "Unknown 13" "Updating" "Battery fully charged" )
state_txt_de=( "unbekannt 1" "Ladestation nicht angesteckt" "Ruhe-Position" "unbekannt 4" "Reinigung aktiv" "Sauger fährt zur Ladestation" "manueller Modus" "Akku wird aufgeladen" "unbekannt 9" "Sauger pausiert" "Spot-Reinigung" "Fehler" "unbekannt 13" "Update wird durchgeführt" "Akku voll geladen" )        
error_txt_en=( "No error" "Laser distance sensor error" "Collision sensor error" "Wheels on top of void, move robot" "Clean hovering sensors, move robot" "Clean main brush" "Clean side brush" "Main wheel stuck?" "Device stuck, clean area" "Dust collector missing" "Clean filter" "Stuck in magnetic barrier" "Low battery" "Charging fault" "Battery fault" "Wall sensors dirty, wipe them" "Place me on flat surface" "Side brushes problem, reboot me" "Suction fan problem" "Unpowered charging station" "Robot not reachable" )
error_txt_de=( "Keine Fehler" "Laser-Distanz-Sensor" "Kollisions-Sensor" "Räder haben keinen Bodenkontakt" "Boden-Sensoren reinigen" "Hauptbürste reinigen" "Seitenbürste reinigen" "Räder blockiert?" "Sauger blokiert" "Staubbehälter nicht eingesetzt" "Filter reinigen" "Sauger blokiert an magnetische Barriere" "Batterie-Level niedrig" "Ladefehler" "Batteriefehler" "Wandsensoren reinigen" "Sauger auf flachen Untergrund stellen" "Seitenbürste Fehler, Robot neu booten" "Saugmotor/Lüfter Fehler" "Ladestation nicht angesteckt" "Robot nicht erreichbar" )

#DO NOT CHANGE ANYTHING BELOW
###################################
LANGUAGE=0
LOOPTIME="20"
DEBUG="0"
UDP_PORT=0
MI_ROBO_IP=0
MI_ROBO_TOKEN=0
SEND_STATUS=1
SEND_CONSUMABLES=1 
SEND_CLEANING_HISTORY=1
VTI_ERROR=0
VI_ERROR_CODE=0
VTI_STATE=0
VI_STATE_CODE=0
VI_BATTERY=0
VI_FANSPEED=0
VI_AREA=0
VI_TIME=0
MINISERVER_IP=0
VI_MAINBRUSH=0
VI_SIDEBRUSH=0
VI_FILTER=0
VI_SENSOR=0
VI_CH_COUNT=0
VI_CH_AREA=0
VI_CH_TIME=0
VI_MSLC=0
ACTIVE=0

source "/opt/loxberry/config/plugins/mirobot2lox/mi.cfg"
configfile_general="/opt/loxberry/config/system/general.cfg" 
timeout="3"
LOGFILE="/opt/loxberry/log/plugins/mirobot2lox/mirobot2lox.log"
RAMDISK="/mnt/mi2l_ramdisk"
D=`date "+%b %d %H:%M:%S"`

ini_parser() {

    INI_FILE=$1
    INI_SECTION=$2

    eval `sed -e 's/[[:space:]]*\=[[:space:]]*/=/g' \
        -e 's/;.*$//' \
        -e 's/[[:space:]]*$//' \
        -e 's/^[[:space:]]*//' \
        -e "s/^\(.*\)=\([^\"']*\)$/$INI_SECTION\1=\"\2\"/" \
        < $INI_FILE \
        | sed -n -e "/^\[$INI_SECTION\]/,/^\s*\[/{/^[^;].*\=.*/p;}"`

}

ini_parser $configfile_general "BASE"
ini_parser $configfile_general "$MINISERVER"

if [ "$MINISERVER" == "MINISERVER1" ]; then
MINISERVER_IP=$MINISERVER1IPADDRESS
MINISERVER_PORT=$MINISERVER1PORT
MINISERVER_USER=$MINISERVER1ADMIN
MINISERVER_PASS=$MINISERVER1PASS
elif [ "$MINISERVER" == "MINISERVER2" ]; then
MINISERVER_IP=$MINISERVER2IPADDRESS
MINISERVER_PORT=$MINISERVER2PORT
MINISERVER_USER=$MINISERVER2ADMIN
MINISERVER_PASS=$MINISERVER2PASS
elif [ "$MINISERVER" == "MINISERVER3" ]; then
MINISERVER_IP=$MINISERVER3IPADDRESS
MINISERVER_PORT=$MINISERVER3PORT
MINISERVER_USER=$MINISERVER3ADMIN
MINISERVER_PASS=$MINISERVER3PASS
elif [ "$MINISERVER" == "MINISERVER4" ]; then
MINISERVER_IP=$MINISERVER4IPADDRESS
MINISERVER_PORT=$MINISERVER4PORT
MINISERVER_USER=$MINISERVER4ADMIN
MINISERVER_PASS=$MINISERVER4PASS
else
MINISERVER_IP=$MINISERVER1IPADDRESS
MINISERVER_PORT=$MINISERVER1PORT
MINISERVER_USER=$MINISERVER1ADMIN
MINISERVER_PASS=$MINISERVER1PASS
fi

if [ $1 == 1 ]; then
ACTIVE=$R1_ACTIVE
MI_ROBO_IP=$R1_MI_ROBO_IP
MI_ROBO_TOKEN=$R1_MI_ROBO_TOKEN
SEND_STATUS=$R1_SEND_STATUS
VTI_ERROR=$R1_VTI_ERROR
VI_ERROR_CODE=$R1_VI_ERROR_CODE
VTI_STATE=$R1_VTI_STATE
VI_STATE_CODE=$R1_VI_STATE_CODE
VI_BATTERY=$R1_VI_BATTERY
VI_FANSPEED=$R1_VI_FANSPEED
VI_AREA=$R1_VI_AREA
VI_TIME=$R1_VI_TIME
VI_DND=$R1_VI_DND
SEND_CONSUMABLES=$R1_SEND_CONSUMABLES
VI_MAINBRUSH=$R1_VI_MAINBRUSH
VI_SIDEBRUSH=$R1_VI_SIDEBRUSH
VI_FILTER=$R1_VI_FILTER
VI_SENSOR=$R1_VI_SENSOR
SEND_CLEANING_HISTORY=$R1_SEND_CLEANING_HISTORY
VI_CH_COUNT=$R1_VI_CH_COUNT
VI_CH_AREA=$R1_VI_CH_AREA
VI_CH_TIME=$R1_VI_CH_TIME
VI_MSLC=$R1_VI_MSLC
fi

if [ $1 == 2 ]; then
ACTIVE=$R2_ACTIVE
MI_ROBO_IP=$R2_MI_ROBO_IP
MI_ROBO_TOKEN=$R2_MI_ROBO_TOKEN
SEND_STATUS=$R2_SEND_STATUS
VTI_ERROR=$R2_VTI_ERROR
VI_ERROR_CODE=$R2_VI_ERROR_CODE
VTI_STATE=$R2_VTI_STATE
VI_STATE_CODE=$R2_VI_STATE_CODE
VI_BATTERY=$R2_VI_BATTERY
VI_FANSPEED=$R2_VI_FANSPEED
VI_AREA=$R2_VI_AREA
VI_TIME=$R2_VI_TIME
VI_DND=$R2_VI_DND
SEND_CONSUMABLES=$R2_SEND_CONSUMABLES
VI_MAINBRUSH=$R2_VI_MAINBRUSH
VI_SIDEBRUSH=$R2_VI_SIDEBRUSH
VI_FILTER=$R2_VI_FILTER
VI_SENSOR=$R2_VI_SENSOR
SEND_CLEANING_HISTORY=$R2_SEND_CLEANING_HISTORY
VI_CH_COUNT=$R2_VI_CH_COUNT
VI_CH_AREA=$R2_VI_CH_AREA
VI_CH_TIME=$R2_VI_CH_TIME
VI_MSLC=$R2_VI_MSLC
fi

if [ $1 == 3 ]; then
ACTIVE=$R3_ACTIVE
MI_ROBO_IP=$R3_MI_ROBO_IP
MI_ROBO_TOKEN=$R3_MI_ROBO_TOKEN
SEND_STATUS=$R3_SEND_STATUS
VTI_ERROR=$R3_VTI_ERROR
VI_ERROR_CODE=$R3_VI_ERROR_CODE
VTI_STATE=$R3_VTI_STATE
VI_STATE_CODE=$R3_VI_STATE_CODE
VI_BATTERY=$R3_VI_BATTERY
VI_FANSPEED=$R3_VI_FANSPEED
VI_AREA=$R3_VI_AREA
VI_TIME=$R3_VI_TIME
VI_DND=$R3_VI_DND
SEND_CONSUMABLES=$R3_SEND_CONSUMABLES
VI_MAINBRUSH=$R3_VI_MAINBRUSH
VI_SIDEBRUSH=$R3_VI_SIDEBRUSH
VI_FILTER=$R3_VI_FILTER
VI_SENSOR=$R3_VI_SENSOR
SEND_CLEANING_HISTORY=$R3_SEND_CLEANING_HISTORY
VI_CH_COUNT=$R3_VI_CH_COUNT
VI_CH_AREA=$R3_VI_CH_AREA
VI_CH_TIME=$R3_VI_CH_TIME
VI_MSLC=$R3_VI_MSLC
fi



if [ $1 == 1 ]; then
source "/mnt/mi2l_ramdisk/robot1.tmp"
error_txt_tmp=$r1_error_txt_tmp
error_code_tmp=$r1_error_code_tmp
state_txt_tmp=$r1_state_txt_tmp
state_code_tmp=$r1_state_code_tmp
battery_tmp=$r1_battery_tmp
fan_power_tmp=$r1_fan_power_tmp
clean_time_tmp=$r1_clean_time_tmp
clean_area_tmp=$r1_clean_area_tmp
dnd_enabled_tmp=$r1_dnd_enabled_tmp
main_brush_work_time_tmp=$r1_main_brush_work_time_tmp
side_brush_work_time_tmp=$r1_side_brush_work_time_tmp
filter_work_time_tmp=$r1_filter_work_time_tmp
sensor_dirty_time_tmp=$r1_sensor_dirty_time_tmp
total_cleanups_tmp=$r1_total_cleanups_tmp
total_cleaning_time_tmp=$r1_total_cleaning_time_tmp
total_cleaning_area_tmp=$r1_total_cleaning_area_tmp
minutes_since_last_cleaning_tmp=$r1_minutes_since_last_cleaning_tmp
fi
if [ $1 == 2 ]; then
source "/mnt/mi2l_ramdisk/robot2.tmp"
error_txt_tmp=$r2_error_txt_tmp
error_code_tmp=$r2_error_code_tmp
state_txt_tmp=$r2_state_txt_tmp
state_code_tmp=$r2_state_code_tmp
battery_tmp=$r2_battery_tmp
fan_power_tmp=$r2_fan_power_tmp
clean_time_tmp=$r2_clean_time_tmp
clean_area_tmp=$r2_clean_area_tmp
dnd_enabled_tmp=$r2_dnd_enabled_tmp
main_brush_work_time_tmp=$r2_main_brush_work_time_tmp
side_brush_work_time_tmp=$r2_side_brush_work_time_tmp
filter_work_time_tmp=$r2_filter_work_time_tmp
sensor_dirty_time_tmp=$r2_sensor_dirty_time_tmp
total_cleanups_tmp=$r2_total_cleanups_tmp
total_cleaning_time_tmp=$r2_total_cleaning_time_tmp
total_cleaning_area_tmp=$r2_total_cleaning_area_tmp
minutes_since_last_cleaning_tmp=$r2_minutes_since_last_cleaning_tmp
fi
if [ $1 == 3 ]; then
source "/mnt/mi2l_ramdisk/robot3.tmp"
error_txt_tmp=$r3_error_txt_tmp
error_code_tmp=$r3_error_code_tmp
state_txt_tmp=$r3_state_txt_tmp
state_code_tmp=$r3_state_code_tmp
battery_tmp=$r3_battery_tmp
fan_power_tmp=$r3_fan_power_tmp
clean_time_tmp=$r3_clean_time_tmp
clean_area_tmp=$r3_clean_area_tmp
dnd_enabled_tmp=$r3_dnd_enabled_tmp
main_brush_work_time_tmp=$r3_main_brush_work_time_tmp
side_brush_work_time_tmp=$r3_side_brush_work_time_tmp
filter_work_time_tmp=$r3_filter_work_time_tmp
sensor_dirty_time_tmp=$r3_sensor_dirty_time_tmp
total_cleanups_tmp=$r3_total_cleanups_tmp
total_cleaning_time_tmp=$r3_total_cleaning_time_tmp
total_cleaning_area_tmp=$r3_total_cleaning_area_tmp
minutes_since_last_cleaning_tmp=$r3_minutes_since_last_cleaning_tmp
fi


if [ "$DEBUG" == "1" ]; then
echo "ROBOT $1" >> $LOGFILE
echo "-----------------------------" >> $LOGFILE
fi
#Status
status(){
json=`mirobo --ip $MI_ROBO_IP --token $MI_ROBO_TOKEN raw_command get_status`
if [ "$DEBUG" == "1" ]; then
echo "$D GET DATA STATUS: $json " >> $LOGFILE
fi
echo $json
json_c=`echo $json | sed 's/[^a-zA-Z0-9 :,_]//g'`
battery=${json_c#*battery: } 
battery=$(echo $battery | cut -f1 -d",")
state_code=${json_c#*state: } 
state_code=$(echo $state_code | cut -f1 -d",")
clean_time=${json_c#*clean_time: } 
clean_time=$(echo $clean_time | cut -f1 -d",")
clean_time=`echo "scale=0; $clean_time / 60" | bc`
clean_area=${json_c#*clean_area: } 
clean_area=$(echo $clean_area | cut -f1 -d",")
clean_area=`echo "scale=0; $clean_area / 1000000" | bc`
error_code=${json_c#*error_code: } 
error_code=$(echo $error_code | cut -f1 -d",")
fan_power=${json_c#*fan_power: } 
fan_power=$(echo $fan_power | cut -f1 -d",")
msg_ver=${json_c#*msg_ver: } 
msg_ver=$(echo $msg_ver | cut -f1 -d",")
dnd_enabled=${json_c#*dnd_enabled: } 
dnd_enabled=$(echo $dnd_enabled | cut -f1 -d",")
if [ $LANGUAGE == "de" ]; then
state_txt=${state_txt_de[$state_code -1]}
error_txt=${error_txt_de[$error_code]}
if [ $battery == "100" ] && [ $state_code = "8" ]; then
state_txt=${state_txt_de[14]}
state_code="15"
fi
elif [ $LANGUAGE == "en" ]; then
state_txt=${state_txt_en[$state_code -1]}
error_txt=${error_txt_en[$error_code]}
if [ $battery == "100" ] && [ $state_code = "8" ]; then
state_txt=${state_txt_en[14]}
state_code="15"
fi
else 
state_txt=${state_txt_en[$state_code -1]}
error_txt=${error_txt_en[$error_code]}
if [ $battery == "100" ] && [ $state_code = "8" ]; then
state_txt=${state_txt_en[14]}
state_code="15"
fi
fi
}

#Consumable
consumables(){
json=`mirobo --ip $MI_ROBO_IP --token $MI_ROBO_TOKEN raw_command get_consumable`
if [ "$DEBUG" == "1" ]; then
echo "$D GET DATA CONSUMABLES: $json " >> $LOGFILE
fi
echo $json
json_c=`echo $json | sed 's/[^a-zA-Z0-9 :,_]//g'`
main_brush_work_time=${json_c#*main_brush_work_time: } 
main_brush_work_time=$(echo $main_brush_work_time | cut -f1 -d",")
main_brush_work_time=`echo "scale=0; $main_brush_work_time / 60 / 60" | bc`
side_brush_work_time=${json_c#*side_brush_work_time: } 
side_brush_work_time=$(echo $side_brush_work_time | cut -f1 -d",")
side_brush_work_time=`echo "scale=0; $side_brush_work_time / 60 / 60" | bc`
filter_work_time=${json_c#*filter_work_time: } 
filter_work_time=$(echo $filter_work_time | cut -f1 -d",")
filter_work_time=`echo "scale=0; $filter_work_time / 60 / 60" | bc`
sensor_dirty_time=${json_c#*sensor_dirty_time: } 
sensor_dirty_time=$(echo $sensor_dirty_time | cut -f1 -d",")
sensor_dirty_time=`echo "scale=0; $sensor_dirty_time / 60 / 60" | bc`
}

#Cleaning Summary
clean_sum(){
json=`mirobo --ip $MI_ROBO_IP --token $MI_ROBO_TOKEN raw_command get_clean_summary`
if [ "$DEBUG" == "1" ]; then
echo "$D GET DATA CLEANING HISTORY: $json " >> $LOGFILE
fi
echo $json
json_c=`echo $json | sed 's/[^0-9,]//g'`
echo $json_c
total_cleaning_time=$(echo $json_c | awk -F, '{print $1}')
total_cleaning_time=`echo "scale=0; $total_cleaning_time / 60" | bc`
total_cleaning_area=$(echo $json_c | awk -F, '{print $2}')
total_cleaning_area=`echo "scale=0; $total_cleaning_area / 1000000" | bc`
total_cleanups=$(echo $json_c | awk -F, '{print $3}')
#Miniutes since last cleaning
json=`mirobo --ip $MI_ROBO_IP --token $MI_ROBO_TOKEN cleaning_history`
json_c=`echo $json | sed 's/[^a-zA-Z0-9 :,_]//g'`
json_c=$(echo $json_c | sed 's/.*Clean 0:\(.*\) complete.*/\1/')
data_arr=()
IFS=' ' read -a data_arr <<< "$json_c"	
epoch_lc=$(date --date "${data_arr[0]} ${data_arr[2]}" +%s)
epoch_now=$(date +%s)
minutes_since_last_cleaning=`echo "scale=0; ($epoch_now - $epoch_lc)/60" | bc`
}

check_connection(){
	up=`fping -r 5 $MI_ROBO_IP 2>&1 | grep -c 'alive'`
if [ $up == 1 ]; then
    serverok="1"
if [ "$DEBUG" == "1" ]; then
echo "$D Robot reachable" >> $LOGFILE
fi	
    else
    serverok="0"
if [ "$DEBUG" == "1" ]; then
echo "$D Robot not reachable" >> $LOGFILE
fi

fi
}

if [ $SEND_STATUS == "1" ]; then
check_connection
if [ $serverok == "1" ]; then
status
else
echo "Status: Robot not reachable" 
if [ $LANGUAGE == "de" ]; then
state_txt=${state_txt_de[11]}
error_txt=${error_txt_de[20]}
elif [ $LANGUAGE == "en" ]; then
state_txt=${state_txt_en[11]}
error_txt=${error_txt_en[20]}
else 
state_txt=${state_txt_en[11]}
error_txt=${error_txt_en[20]}
fi
error_code="11"
state_code="20"
fi
if [ "$error_txt_tmp" != "$error_txt" ] && [ $VTI_ERROR != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VTI$VTI_ERROR/"$error_txt")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND ERROR (VTI:$VTI_ERROR): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$error_code_tmp" != "$error_code" ] && [ $VI_ERROR_CODE != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_ERROR_CODE/"$error_code")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND ERROR_CODE (VI:$VI_ERROR_CODE): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$state_txt_tmp" != "$state_txt" ] && [ $VTI_STATE != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VTI$VTI_STATE/"$state_txt")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND STATUS (VTI:$VTI_STATE): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$state_code_tmp" != "$state_code" ] && [ $VI_STATE_CODE != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_STATE_CODE/"$state_code")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND STATUS_CODE (VI:$VI_STATE_CODE): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$battery_tmp" != "$battery" ] && [ $VI_BATTERY != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_BATTERY/"$battery")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND BATTERY (VI:$VI_BATTERY): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$fan_power_tmp" != "$fan_power" ] && [ $VI_FANSPEED != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_FANSPEED/"$fan_power")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND FANSPEED (VI:$VI_FANSPEED): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$clean_time_tmp" != "$clean_time" ] && [ $VI_TIME != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_TIME/"$clean_time")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND TIME (VI:$VI_TIME): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$clean_area_tmp" != "$clean_area" ] && [ $VI_AREA != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_AREA/"$clean_area")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND AREA (VI:$VI_AREA): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ "$dnd_enabled_tmp" != "$dnd_enabled" ] && [ $VI_DND != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_DND/"$dnd_enabled")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND DND (VI:$VI_DND): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ $1 == 1 ]; then
echo r1_error_txt_tmp="\"$error_txt\"" > $RAMDISK/robot1.tmp
echo r1_error_code_tmp=$error_code >> $RAMDISK/robot1.tmp
echo r1_state_txt_tmp="\"$state_txt\"" >> $RAMDISK/robot1.tmp
echo r1_state_code_tmp=$state_code >> $RAMDISK/robot1.tmp
echo r1_battery_tmp=$battery >> $RAMDISK/robot1.tmp
echo r1_fan_power_tmp=$fan_power >> $RAMDISK/robot1.tmp
echo r1_clean_time_tmp=$clean_time >> $RAMDISK/robot1.tmp
echo r1_clean_area_tmp=$clean_area >> $RAMDISK/robot1.tmp
echo r1_dnd_enabled_tmp=$dnd_enabled >> $RAMDISK/robot1.tmp
fi
if [ $1 == 2 ]; then
echo r2_error_txt_tmp="\"$error_txt\"" > $RAMDISK/robot3.tmp
echo r2_error_code_tmp=$error_code >> $RAMDISK/robot3.tmp
echo r2_state_txt_tmp="\"$state_txt\"" >> $RAMDISK/robot3.tmp
echo r2_state_code_tmp=$state_code >> $RAMDISK/robot3.tmp
echo r2_battery_tmp=$battery >> $RAMDISK/robot3.tmp
echo r2_fan_power_tmp=$fan_power >> $RAMDISK/robot3.tmp
echo r2_clean_time_tmp=$clean_time >> $RAMDISK/robot3.tmp
echo r2_clean_area_tmp=$clean_area >> $RAMDISK/robot3.tmp
echo r2_dnd_enabled_tmp=$dnd_enabled >> $RAMDISK/robot3.tmp
fi
if [ $1 == 3 ]; then
echo r3_error_txt_tmp="\"$error_txt\"" > $RAMDISK/robot3.tmp
echo r3_error_code_tmp=$error_code >> $RAMDISK/robot3.tmp
echo r3_state_txt_tmp="\"$state_txt\"" >> $RAMDISK/robot3.tmp
echo r3_state_code_tmp=$state_code >> $RAMDISK/robot3.tmp
echo r3_battery_tmp=$battery >> $RAMDISK/robot3.tmp
echo r3_fan_power_tmp=$fan_power >> $RAMDISK/robot3.tmp
echo r3_clean_time_tmp=$clean_time >> $RAMDISK/robot3.tmp
echo r3_clean_area_tmp=$clean_area >> $RAMDISK/robot3.tmp
echo r3_dnd_enabled_tmp=$dnd_enabled >> $RAMDISK/robot3.tmp
fi
fi

if [ $SEND_CONSUMABLES == "1" ]; then
check_connection
if [ $serverok == "1" ]; then
consumables
else
echo "Consumables: Robot not reachable"
fi
if [ "$main_brush_work_time_tmp" != "$main_brush_work_time" ] && [ $VI_MAINBRUSH != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_MAINBRUSH/"$main_brush_work_time")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND MAINBRUSH (VI:$VI_MAINBRUSH): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ "$side_brush_work_time_tmp" != "$side_brush_work_time" ] && [ $VI_SIDEBRUSH != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_SIDEBRUSH/"$side_brush_work_time")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND SIDEBRUSH (VI:$VI_SIDEBRUSH): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ "$filter_work_time_tmp" != "$filter_work_time" ] && [ $VI_FILTER != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_FILTER/"$filter_work_time")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND FILTER (VI:$VI_FILTER): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ "$sensor_dirty_time_tmp" != "$sensor_dirty_time" ] && [ $VI_SENSOR != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_SENSOR/"$sensor_dirty_time")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND SENSOR (VI:$VI_SENSOR): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ $1 == 1 ]; then
echo r1_main_brush_work_time_tmp=$main_brush_work_time >> $RAMDISK/robot1.tmp
echo r1_side_brush_work_time_tmp=$side_brush_work_time >> $RAMDISK/robot1.tmp
echo r1_filter_work_time_tmp=$filter_work_time >> $RAMDISK/robot1.tmp
echo r1_sensor_dirty_time_tmp=$sensor_dirty_time >> $RAMDISK/robot1.tmp
fi
if [ $1 == 2 ]; then
echo r2_main_brush_work_time_tmp=$main_brush_work_time >> $RAMDISK/robot2.tmp
echo r2_side_brush_work_time_tmp=$side_brush_work_time >> $RAMDISK/robot2.tmp
echo r2_filter_work_time_tmp=$filter_work_time >> $RAMDISK/robot2.tmp
echo r2_sensor_dirty_time_tmp=$sensor_dirty_time >> $RAMDISK/robot2.tmp
fi
if [ $1 == 3 ]; then
echo r3_main_brush_work_time_tmp=$main_brush_work_time >> $RAMDISK/robot3.tmp
echo r3_side_brush_work_time_tmp=$side_brush_work_time >> $RAMDISK/robot3.tmp
echo r3_filter_work_time_tmp=$filter_work_time >> $RAMDISK/robot3.tmp
echo r3_sensor_dirty_time_tmp=$sensor_dirty_time >> $RAMDISK/robot3.tmp
fi

fi

if [ $SEND_CLEANING_HISTORY == "1" ]; then
check_connection
if [ $serverok == "1" ]; then
clean_sum
else
echo "Cleaning History: Robot not reachable"
fi
if [ "$total_cleanups_tmp" != "$total_cleanups" ] && [ $VI_CH_COUNT != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_CH_COUNT/"$total_cleanups")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND CH_COUNT (VI:$VI_CH_COUNT): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ "$total_cleaning_time_tmp" != "$total_cleaning_time" ] && [ $VI_CH_TIME != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_CH_TIME/"$total_cleaning_time")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND CH_TIME (VI:$VI_CH_TIME): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ "$total_cleaning_area_tmp" != "$total_cleaning_area" ] && [ $VI_CH_AREA != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_CH_AREA/"$total_cleaning_area")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND CH_AREA (VI:$VI_CH_AREA): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi
if [ "$minutes_since_last_cleaning_tmp" != "$minutes_since_last_cleaning" ] && [ $VI_MSLC != "0" ]; then
output_tmp=$(wget -t 1 -T $timeout -4 -q -O - --user $MINISERVER_USER --password $MINISERVER_PASS http://$MINISERVER_IP:$MINISERVER_PORT/dev/sps/io/VI$VI_MSLC/"$minutes_since_last_cleaning")
if [ "$DEBUG" == "1" ]; then
echo "$D SEND CH_LC (VI:$VI_MSLC): $output_tmp " >> $LOGFILE
fi
sleep 0.1
fi

if [ $1 == 1 ]; then
echo r1_total_cleanups_tmp=$total_cleanups >> $RAMDISK/robot1.tmp
echo r1_total_cleaning_time_tmp=$total_cleaning_time >> $RAMDISK/robot1.tmp
echo r1_total_cleaning_area_tmp=$total_cleaning_area >> $RAMDISK/robot1.tmp
echo r1_minutes_since_last_cleaning_tmp=$minutes_since_last_cleaning >> $RAMDISK/robot1.tmp
fi
if [ $1 == 2 ]; then
echo r2_total_cleanups_tmp=$total_cleanups >> $RAMDISK/robot2.tmp
echo r2_total_cleaning_time_tmp=$total_cleaning_time >> $RAMDISK/robot2.tmp
echo r2total_cleaning_area_tmp=$total_cleaning_area >> $RAMDISK/robot2.tmp
echo r2_minutes_since_last_cleaning_tmp=$minutes_since_last_cleaning >> $RAMDISK/robot2.tmp
fi
if [ $1 == 3 ]; then
echo r3_total_cleanups_tmp=$total_cleanups >> $RAMDISK/robot3.tmp
echo r3_total_cleaning_time_tmp=$total_cleaning_time >> $RAMDISK/robot3.tmp
echo r3_total_cleaning_area_tmp=$total_cleaning_area >> $RAMDISK/robot3.tmp
echo r3_minutes_since_last_cleaning_tmp=$minutes_since_last_cleaning >> $RAMDISK/robot3.tmp
fi

fi
if [ "$DEBUG" == "1" ]; then
echo "-----------------------------" >> $LOGFILE
fi
