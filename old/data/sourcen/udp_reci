#!/bin/bash

source "/opt/loxberry/config/plugins/mirobot2lox/mi.cfg"
LOGFILE="/opt/loxberry/log/plugins/mirobot2lox/mirobot2lox.log"

pid_socat=$(ps -eo pid,command | grep "socat - udp4-listen:$UDP_PORT" | grep -v grep | awk '{print $1}')
if [ "$pid_socat" > "0" ]; then
kill -9 $pid_socat
sleep .2
fi

socat - udp4-listen:$UDP_PORT,reuseaddr,fork | while read COMMAND
do
	D=`date "+%b %d %H:%M:%S"`
	
command_arr=()
IFS=' ' read -a command_arr <<< "$COMMAND"	
	
	
#ROBOT 1	
	if [ "${command_arr[0]}" == "R1_MI_START" ]; then 
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN start
	echo "$D Robot 1 UDP Start" >> $LOGFILE
	fi
    if [ "${command_arr[0]}" == "R1_MI_PAUSE" ]; then 
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN pause
	echo "$D Robot 1 UDP Pause" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R1_MI_DOCK" ]; then 
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN home
	echo "$D Robot 1 UDP Dock" >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R1_MI_FIND_ME" ]; then 
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN raw_command find_me
	echo "$D Robot 1 UDP Find Me" >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R1_MI_DND_ON" ]; then 
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN dnd on 12 0 11 59
	echo "$D Robot 1 UDP DND on" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R1_MI_DND_OFF" ]; then 
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN dnd off
	echo "$D Robot 1 UDP DND off" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R1_VOLUME" ]; then 
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN sound ${command_arr[1]}
	echo "$D Robot 1 Set Volume to "${command_arr[1]} >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R1_MI_FAN_Q" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN fanspeed 38
	echo "$D Robot 1 UDP Fanspeed Quiet (38)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R1_MI_FAN_B" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN fanspeed 60
	echo "$D Robot 1 UDP Fanspeed Balanced (60)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R1_MI_FAN_T" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN fanspeed 77
	echo "$D Robot 1 UDP Fanspeed Turbo (77)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R1_MI_FAN_F" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN fanspeed 90
	echo "$D Robot 1 UDP Fanspeed Full (90)" >> $LOGFILE
    fi
	if [ "${command_arr[0]}" == "R1_MI_PARK_RELEASE" ]; then
	move_time="3"
	move_time_2=`echo "scale=0; $R1_PARK_RELEASE_TIME * 1000 " | bc`
	park_release_1="5"
	park_release_2=`echo "scale=0; $R1_PARK_RELEASE_TIME + 1 " | bc`
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN manual start
	sleep $park_release_1
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN manual move 0 0.27 $move_time_2
	sleep $park_release_2
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN manual stop
	echo "$D Robot 1 UDP Park Release / $R1_PARK_RELEASE_TIME Sec." >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R1_MI_CONSUMABLES_RESET_MAIN_BRUSH" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN reset_consumable main_brush
	echo "$D Robot 1 UDP Reset Consumables - Main-Brush" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R1_MI_CONSUMABLES_RESET_SIDE_BRUSH" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN reset_consumable side_brush
	echo "$D Robot 1 UDP Reset Consumables - Side-Brush" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R1_MI_CONSUMABLES_RESET_SENSOR" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN reset_consumable sensor_dirty
	echo "$D Robot 1 UDP Reset Consumables - Sensor" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R1_MI_CONSUMABLES_RESET_FILTER" ]; then
	mirobo --ip $R1_MI_ROBO_IP --token $R1_MI_ROBO_TOKEN reset_consumable filter
	echo "$D Robot 1 UDP Reset Consumables - Filter" >> $LOGFILE
	fi
	
#ROBOT 2
	if [ "${command_arr[0]}" == "R2_MI_START" ]; then 
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN start
	echo "$D Robot 2 UDP Start" >> $LOGFILE
	fi
    if [ "${command_arr[0]}" == "R2_MI_PAUSE" ]; then 
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN pause
	echo "$D Robot 2 UDP Pause" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R2_MI_DOCK" ]; then 
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN home
	echo "$D Robot 2 UDP Dock" >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R2_MI_FIND_ME" ]; then 
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN raw_command find_me
	echo "$D Robot 2 UDP Find Me" >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R2_MI_DND_ON" ]; then 
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN dnd on 12 0 11 59
	echo "$D Robot 2 UDP DND on" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R2_MI_DND_OFF" ]; then 
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN dnd off
	echo "$D Robot 2 UDP DND off" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R2_VOLUME" ]; then 
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN sound ${command_arr[1]}
	echo "$D Robot 2 Set Volume to "${command_arr[1]} >> $LOGFILE
	fi

	if [ "${command_arr[0]}" == "R2_MI_FAN_Q" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN fanspeed 38
	echo "$D Robot 2 UDP Fanspeed Quiet (38)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R2_MI_FAN_B" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN fanspeed 60
	echo "$D Robot 2 UDP Fanspeed Balanced (60)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R2_MI_FAN_T" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN fanspeed 77
	echo "$D Robot 2 UDP Fanspeed Turbo (77)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R2_MI_FAN_F" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN fanspeed 90
	echo "$D Robot 2 UDP Fanspeed Full (90)" >> $LOGFILE
    fi
	if [ "${command_arr[0]}" == "R2_MI_PARK_RELEASE" ]; then
	move_time="3"
	move_time_2=`echo "scale=0; $R2_PARK_RELEASE_TIME * 1000 " | bc`
	park_release_1="5"
	park_release_2=`echo "scale=0; $R2_PARK_RELEASE_TIME + 1 " | bc`

	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN manual start
	sleep $park_release_1
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN manual move 0 0.27 $move_time_2
	sleep $park_release_2
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN manual stop
	echo "$D Robot 2 UDP Park Release / $R2_PARK_RELEASE_TIME Sec." >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R2_MI_CONSUMABLES_RESET_MAIN_BRUSH" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN reset_consumable main_brush
	echo "$D Robot 2 UDP Reset Consumables - Main-Brush" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R2_MI_CONSUMABLES_RESET_SIDE_BRUSH" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN reset_consumable side_brush
	echo "$D Robot 2 UDP Reset Consumables - Side-Brush" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R2_MI_CONSUMABLES_RESET_SENSOR" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN reset_consumable sensor_dirty
	echo "$D Robot 2 UDP Reset Consumables - Sensor" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R2_MI_CONSUMABLES_RESET_FILTER" ]; then
	mirobo --ip $R2_MI_ROBO_IP --token $R2_MI_ROBO_TOKEN reset_consumable filter
	echo "$D Robot 2 UDP Reset Consumables - Filter" >> $LOGFILE
	fi
	
#ROBOT 3
	if [ "${command_arr[0]}" == "R3_MI_START" ]; then 
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN start
	echo "$D Robot 3 UDP Start" >> $LOGFILE
	fi
    if [ "${command_arr[0]}" == "R3_MI_PAUSE" ]; then 
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN pause
	echo "$D Robot 3 UDP Pause" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R3_MI_DOCK" ]; then 
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN home
	echo "$D Robot 3 UDP Dock" >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R3_MI_FIND_ME" ]; then 
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN raw_command find_me
	echo "$D Robot 3 UDP Find Me" >> $LOGFILE
	
	fi
	if [ "${command_arr[0]}" == "R3_MI_DND_ON" ]; then 
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN dnd on 12 0 11 59
	echo "$D Robot 3 UDP DND on" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R3_MI_DND_OFF" ]; then 
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN dnd off
	echo "$D Robot 3 UDP DND off" >> $LOGFILE
	fi
	if [ "${command_arr[0]}" == "R3_VOLUME" ]; then 
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN sound ${command_arr[1]}
	echo "$D Robot 3 Set Volume to "${command_arr[1]} >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R3_MI_FAN_Q" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN fanspeed 38
	echo "$D Robot 3 UDP Fanspeed Quiet (38)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R3_MI_FAN_B" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN fanspeed 60
	echo "$D Robot 3 UDP Fanspeed Balanced (60)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R3_MI_FAN_T" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN fanspeed 77
	echo "$D Robot 3 UDP Fanspeed Turbo (77)" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R3_MI_FAN_F" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN fanspeed 90
	echo "$D Robot 3 UDP Fanspeed Full (90)" >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "R3_MI_PARK_RELEASE" ]; then
	move_time="3"
	move_time_2=`echo "scale=0; $R3_PARK_RELEASE_TIME * 1000 " | bc`
	park_release_1="5"
	park_release_2=`echo "scale=0; $R3_PARK_RELEASE_TIME + 1 " | bc`

	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN manual start
	sleep $park_release_1
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN manual move 0 0.27 $move_time_2
	sleep $park_release_2
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN manual stop
	echo "$D Robot 3 UDP Park Release / $R3_PARK_RELEASE_TIME Sec." >> $LOGFILE	
	fi
	
	if [ "${command_arr[0]}" == "R3_MI_CONSUMABLES_RESET_MAIN_BRUSH" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN reset_consumable main_brush
	echo "$D Robot 3 UDP Reset Consumables - Main-Brush" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R3_MI_CONSUMABLES_RESET_SIDE_BRUSH" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN reset_consumable side_brush
	echo "$D Robot 3 UDP Reset Consumables - Main-Brush" >> $LOGFILE	
	elif [ "${command_arr[0]}" == "R3_MI_CONSUMABLES_RESET_SENSOR" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN reset_consumable sensor_dirty
	echo "$D Robot 3 UDP Reset Consumables - Sensor" >> $LOGFILE
	elif [ "${command_arr[0]}" == "R3_MI_CONSUMABLES_RESET_FILTER" ]; then
	mirobo --ip $R3_MI_ROBO_IP --token $R3_MI_ROBO_TOKEN reset_consumable filter
	echo "$D Robot 3 UDP Reset Consumables - Filter" >> $LOGFILE
	fi
	
	if [ "${command_arr[0]}" == "MI2LOX_RESET" ]; then 
	service mirobo2lox restart
	echo "$D Service mirobo2lox UDP Restart" >> $LOGFILE
	fi
	
done
